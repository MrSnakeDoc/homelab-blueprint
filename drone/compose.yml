---
networks:
  app-network:
    external: true

services:
  drone:
    image: drone/drone:latest
    container_name: drone
    restart: unless-stopped
    volumes:
      - ~/docker/drone/:/data
    environment:
      - DRONE_GITEA_SERVER=https://gitea.<yourinternaldomain>
      - DRONE_GITEA_CLIENT_ID=${GITEA_CLIENT_ID}
      - DRONE_GITEA_CLIENT_SECRET=${GITEA_CLIENT_SECRET}
      - DRONE_RPC_SECRET=${RUNNERS_SECRETS}
      - DRONE_SERVER_HOST=drone.<yourinternaldomain>
      - DRONE_SERVER_PROTO=https
    labels:
      - 'traefik.enable=true'
      - 'traefik.http.routers.drone.entrypoints=http,https'
      - 'traefik.http.routers.drone.rule=Host(`drone.<yourinternaldomain>`)'
      - 'traefik.http.services.drone.loadbalancer.server.port=80'
      - 'traefik.http.routers.drone.service=drone'
      - 'traefik.http.routers.drone.tls=true'
      - 'traefik.http.routers.drone.tls.certresolver=prod'
    networks:
      - app-network

  first-runner:
    image: drone/drone-runner-docker:1
    container_name: frunner
    restart: always
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      - DRONE_RPC_PROTO=https
      - DRONE_RPC_HOST=drone.<yourinternaldomain>
      - DRONE_RPC_SECRET=${RUNNERS_SECRETS}
      - DRONE_RUNNER_CAPACITY=2
      - DRONE_RUNNER_NAME=first-runner
    labels:
      - 'traefik.enable=true'
      - 'traefik.http.routers.first-runner.entrypoints=http,https'
      - 'traefik.http.routers.first-runner.rule=Host(`runner1.<yourinternaldomain>`)'
      - 'traefik.http.services.first-runner.loadbalancer.server.port=3000'
      - 'traefik.http.routers.first-runner.service=first-runner'
      - 'traefik.http.routers.first-runner.tls=true'
      - 'traefik.http.routers.first-runner.tls.certresolver=prod'
    depends_on:
      - drone
    networks:
      - app-network

  second-runner:
    image: drone/drone-runner-docker:1
    container_name: srunner
    restart: always
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      - DRONE_RPC_PROTO=https
      - DRONE_RPC_HOST=drone.<yourinternaldomain>
      - DRONE_RPC_SECRET=${RUNNERS_SECRETS}
      - DRONE_RUNNER_CAPACITY=2
      - DRONE_RUNNER_NAME=second-runner
    labels:
      - 'traefik.enable=true'
      - 'traefik.http.routers.second-runner.entrypoints=http,https'
      - 'traefik.http.routers.second-runner.rule=Host(`runner2.<yourinternaldomain>`)'
      - 'traefik.http.services.second-runner.loadbalancer.server.port=3000'
      - 'traefik.http.routers.second-runner.service=second-runner'
      - 'traefik.http.routers.second-runner.tls=true'
      - 'traefik.http.routers.second-runner.tls.certresolver=prod'
    depends_on:
      - drone
    networks:
      - app-network